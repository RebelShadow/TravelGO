# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mforms', [dirname(__file__)])
        except ImportError:
            import _mforms
            return _mforms
        if fp is not None:
            try:
                _mod = imp.load_module('_mforms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mforms = swig_import_helper()
    del swig_import_helper
else:
    import _mforms
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mforms.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _mforms.SwigPyIterator_value(self)
    def incr(self, n = 1): return _mforms.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _mforms.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _mforms.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _mforms.SwigPyIterator_equal(self, *args)
    def copy(self): return _mforms.SwigPyIterator_copy(self)
    def next(self): return _mforms.SwigPyIterator_next(self)
    def __next__(self): return _mforms.SwigPyIterator___next__(self)
    def previous(self): return _mforms.SwigPyIterator_previous(self)
    def advance(self, *args): return _mforms.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _mforms.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _mforms.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _mforms.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _mforms.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _mforms.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _mforms.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mforms.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class doubleList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleList, name)
    __repr__ = _swig_repr
    def iterator(self): return _mforms.doubleList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mforms.doubleList___nonzero__(self)
    def __bool__(self): return _mforms.doubleList___bool__(self)
    def __len__(self): return _mforms.doubleList___len__(self)
    def pop(self): return _mforms.doubleList_pop(self)
    def __getslice__(self, *args): return _mforms.doubleList___getslice__(self, *args)
    def __setslice__(self, *args): return _mforms.doubleList___setslice__(self, *args)
    def __delslice__(self, *args): return _mforms.doubleList___delslice__(self, *args)
    def __delitem__(self, *args): return _mforms.doubleList___delitem__(self, *args)
    def __getitem__(self, *args): return _mforms.doubleList___getitem__(self, *args)
    def __setitem__(self, *args): return _mforms.doubleList___setitem__(self, *args)
    def append(self, *args): return _mforms.doubleList_append(self, *args)
    def empty(self): return _mforms.doubleList_empty(self)
    def size(self): return _mforms.doubleList_size(self)
    def clear(self): return _mforms.doubleList_clear(self)
    def swap(self, *args): return _mforms.doubleList_swap(self, *args)
    def get_allocator(self): return _mforms.doubleList_get_allocator(self)
    def begin(self): return _mforms.doubleList_begin(self)
    def end(self): return _mforms.doubleList_end(self)
    def rbegin(self): return _mforms.doubleList_rbegin(self)
    def rend(self): return _mforms.doubleList_rend(self)
    def pop_back(self): return _mforms.doubleList_pop_back(self)
    def erase(self, *args): return _mforms.doubleList_erase(self, *args)
    def __init__(self, *args): 
        this = _mforms.new_doubleList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mforms.doubleList_push_back(self, *args)
    def front(self): return _mforms.doubleList_front(self)
    def back(self): return _mforms.doubleList_back(self)
    def assign(self, *args): return _mforms.doubleList_assign(self, *args)
    def resize(self, *args): return _mforms.doubleList_resize(self, *args)
    def insert(self, *args): return _mforms.doubleList_insert(self, *args)
    def pop_front(self): return _mforms.doubleList_pop_front(self)
    def push_front(self, *args): return _mforms.doubleList_push_front(self, *args)
    def reverse(self): return _mforms.doubleList_reverse(self)
    __swig_destroy__ = _mforms.delete_doubleList
    __del__ = lambda self : None;
doubleList_swigregister = _mforms.doubleList_swigregister
doubleList_swigregister(doubleList)

def newLabel(text=""):
    c = Label(text)
    c.set_managed()
    return c

def newButton(*args):
    c = Button(*args)
    c.set_managed()
    return c

def newCheckBox(*args):
    c = CheckBox(*args)
    c.set_managed()
    return c

def newTextEntry(*args):
    c = TextEntry(*args)
    c.set_managed()
    return c

def newTextBox(*args):
    c = TextBox(*args)
    c.set_managed()
    return c

def newSelector(*args):
    c = Selector(*args)
    c.set_managed()
    return c

def newListBox(*args):
    c = ListBox(*args)
    c.set_managed()
    return c

def newTabView(*args):
    c = TabView(*args)
    c.set_managed()
    return c

def newBox(*args):
    c = Box(*args)
    c.set_managed()
    return c

def newPanel(*args):
    c = Panel(*args)
    c.set_managed()
    return c

def newFileChooser(*args):
    c = FileChooser(*args)
    c.set_managed()
    return c

def newRadioButton(*args):
    c = RadioButton(*args)
    c.set_managed()
    return c

def newImageBox(*args):
    c = ImageBox(*args)
    c.set_managed()
    return c

def newProgressBar(*args):
    c = ProgressBar(*args)
    c.set_managed()
    return c

def newTable(*args):
    c = Table(*args)
    c.set_managed()
    return c

def newScrollPanel(*args):
    c = ScrollPanel(*args)
    c.set_managed()
    return c

def newTreeView(*args):
    c = TreeView(*args)
    c.set_managed()
    return c

def newAppView(*args):
    c = AppView(*args)
    return c

def newDrawBox(*args):
    c = DrawBox(*args)
    c.set_managed()
    return c

def newTabSwitcher(*args):
    c = TabSwitcher(*args)
    c.set_managed()
    return c

def newSectionBox(*args):
    c = SectionBox(*args)
    c.set_managed()
    return c

def newWidgetSeparator(*args):
    c = WidgetSeparator(*args)
    c.set_managed()
    return c

def newWidgetContainer(*args):
    c = WidgetContainer(*args)
    c.set_managed()
    return c

def newHeartbeatWidget(*args):
    c = HeartbeatWidget(*args)
    c.set_managed()
    return c

def newServerInfoWidget(*args):
    c = ServerInfoWidget(*args)
    c.set_managed()
    return c

def newBarGraphWidget(*args):
    c = BarGraphWidget(*args)
    c.set_managed()
    return c

def newLineDiagramWidget(*args):
    c = LineDiagramWidget(*args)
    c.set_managed()
    return c

def newWebBrowser(*args):
    c = WebBrowser(*args)
    c.set_managed()
    return c

def newPopup(*args):
    c = Popup(*args)
    c.set_managed()
    return c

def newTaskSidebar(*args):
    c = TaskSidebar.create(*args)
    c.set_managed()
    return c

def newSimpleGrid(*args):
    c = SimpleGrid(*args)
    c.set_managed()
    return c


class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def retain(self): return _mforms.Object_retain(self)
    def release(self): return _mforms.Object_release(self)
    def set_managed(self): return _mforms.Object_set_managed(self)
    def retain_count(self): return _mforms.Object_retain_count(self)
    def set_destroying(self): return _mforms.Object_set_destroying(self)
    def is_destroying(self): return _mforms.Object_is_destroying(self)
    def __init__(self): 
        this = _mforms.new_Object()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Object
    __del__ = lambda self : None;
Object_swigregister = _mforms.Object_swigregister
Object_swigregister(Object)

ResizeNone = _mforms.ResizeNone
ResizeVertical = _mforms.ResizeVertical
ResizeHorizontal = _mforms.ResizeHorizontal
ResizeBoth = _mforms.ResizeBoth
LayoutNone = _mforms.LayoutNone
LayoutTile = _mforms.LayoutTile
LayoutCenter = _mforms.LayoutCenter
LayoutStretch = _mforms.LayoutStretch
LayoutZoom = _mforms.LayoutZoom
MouseButtonLeft = _mforms.MouseButtonLeft
MouseButtonRight = _mforms.MouseButtonRight
MouseButtonMiddle = _mforms.MouseButtonMiddle
class View(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mforms.delete_View
    __del__ = lambda self : None;
    def set_managed(self): return _mforms.View_set_managed(self)
    def find_subview(self, *args): return _mforms.View_find_subview(self, *args)
    def contains_subview(self, *args): return _mforms.View_contains_subview(self, *args)
    def get_resize_mode(self): return _mforms.View_get_resize_mode(self)
    def set_resize_mode(self, *args): return _mforms.View_set_resize_mode(self, *args)
    def signal_resized(self): return _mforms.View_signal_resized(self)
    def set_name(self, *args): return _mforms.View_set_name(self, *args)
    def set_tooltip(self, *args): return _mforms.View_set_tooltip(self, *args)
    def set_font(self, *args): return _mforms.View_set_font(self, *args)
    def get_name(self): return _mforms.View_get_name(self)
    def set_parent(self, *args): return _mforms.View_set_parent(self, *args)
    def get_parent(self): return _mforms.View_get_parent(self)
    def get_parent_form(self): return _mforms.View_get_parent_form(self)
    def get_width(self): return _mforms.View_get_width(self)
    def get_height(self): return _mforms.View_get_height(self)
    def get_preferred_width(self): return _mforms.View_get_preferred_width(self)
    def get_preferred_height(self): return _mforms.View_get_preferred_height(self)
    def get_x(self): return _mforms.View_get_x(self)
    def get_y(self): return _mforms.View_get_y(self)
    def set_position(self, *args): return _mforms.View_set_position(self, *args)
    def set_size(self, *args): return _mforms.View_set_size(self, *args)
    def set_padding(self, *args): return _mforms.View_set_padding(self, *args)
    def client_to_screen(self, *args): return _mforms.View_client_to_screen(self, *args)
    def show(self, flag = True): return _mforms.View_show(self, flag)
    def is_shown(self): return _mforms.View_is_shown(self)
    def set_enabled(self, *args): return _mforms.View_set_enabled(self, *args)
    def set_needs_repaint(self): return _mforms.View_set_needs_repaint(self)
    def needs_resize(self): return _mforms.View_needs_resize(self)
    def relayout(self): return _mforms.View_relayout(self)
    def set_layout_dirty(self, *args): return _mforms.View_set_layout_dirty(self, *args)
    def is_layout_dirty(self): return _mforms.View_is_layout_dirty(self)
    def on_resize(self): return _mforms.View_on_resize(self)
    def suspend_layout(self): return _mforms.View_suspend_layout(self)
    def resume_layout(self): return _mforms.View_resume_layout(self)
    def set_front_color(self, *args): return _mforms.View_set_front_color(self, *args)
    def get_front_color(self): return _mforms.View_get_front_color(self)
    def set_back_color(self, *args): return _mforms.View_set_back_color(self, *args)
    def get_back_color(self): return _mforms.View_get_back_color(self)
    def set_back_image(self, *args): return _mforms.View_set_back_image(self, *args)
    def show_retain_counts(self, depth = 0): return _mforms.View_show_retain_counts(self, depth)
    def get_string_value(self): return _mforms.View_get_string_value(self)
    def get_int_value(self): return _mforms.View_get_int_value(self)
    def get_bool_value(self): return _mforms.View_get_bool_value(self)
    def flush_events(self): return _mforms.View_flush_events(self)
View_swigregister = _mforms.View_swigregister
View_swigregister(View)

TOP_FORM_PADDING = _mforms.TOP_FORM_PADDING
FormNone = _mforms.FormNone
FormSingleFrame = _mforms.FormSingleFrame
FormDialogFrame = _mforms.FormDialogFrame
FormResizable = _mforms.FormResizable
FormMinimizable = _mforms.FormMinimizable
FormHideOnClose = _mforms.FormHideOnClose
FormStayOnTop = _mforms.FormStayOnTop
FormToolWindow = _mforms.FormToolWindow
class Form(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Form, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Form, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Form(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Form
    __del__ = lambda self : None;
    __swig_getmethods__["main_form"] = lambda x: _mforms.Form_main_form
    if _newclass:main_form = staticmethod(_mforms.Form_main_form)
    def set_content(self, *args): return _mforms.Form_set_content(self, *args)
    def set_title(self, *args): return _mforms.Form_set_title(self, *args)
    def show_modal(self, *args): return _mforms.Form_show_modal(self, *args)
    def run_modal(self, *args): return _mforms.Form_run_modal(self, *args)
    def end_modal(self, *args): return _mforms.Form_end_modal(self, *args)
    def close(self): return _mforms.Form_close(self)
    def center(self): return _mforms.Form_center(self)
    def flush_events(self): return _mforms.Form_flush_events(self)
    def set_release_on_close(self, *args): return _mforms.Form_set_release_on_close(self, *args)
    def was_closed(self): return _mforms.Form_was_closed(self)
    def needs_resize(self): return _mforms.Form_needs_resize(self)
    def add_closed_callback(self, *args): return _mforms.Form_add_closed_callback(self, *args)
    def call_closed_callback(self): return _mforms.Form_call_closed_callback(self)
Form_swigregister = _mforms.Form_swigregister
Form_swigregister(Form)

def Form_main_form():
  return _mforms.Form_main_form()
Form_main_form = _mforms.Form_main_form

PushButton = _mforms.PushButton
ToolButton = _mforms.ToolButton
AdminActionButton = _mforms.AdminActionButton
class Button(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Button, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Button, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Button(*args)
        try: self.this.append(this)
        except: self.this = this
    def enable_internal_padding(self, *args): return _mforms.Button_enable_internal_padding(self, *args)
    def set_text(self, *args): return _mforms.Button_set_text(self, *args)
    def set_icon(self, *args): return _mforms.Button_set_icon(self, *args)
    def add_clicked_callback(self, *args): return _mforms.Button_add_clicked_callback(self, *args)
    def call_clicked_callback(self): return _mforms.Button_call_clicked_callback(self)
    __swig_destroy__ = _mforms.delete_Button
    __del__ = lambda self : None;
Button_swigregister = _mforms.Button_swigregister
Button_swigregister(Button)

class CheckBox(Button):
    __swig_setmethods__ = {}
    for _s in [Button]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Button]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_CheckBox()
        try: self.this.append(this)
        except: self.this = this
    def set_active(self, *args): return _mforms.CheckBox_set_active(self, *args)
    def get_active(self): return _mforms.CheckBox_get_active(self)
    def get_int_value(self): return _mforms.CheckBox_get_int_value(self)
    def get_bool_value(self): return _mforms.CheckBox_get_bool_value(self)
    def get_string_value(self): return _mforms.CheckBox_get_string_value(self)
    __swig_destroy__ = _mforms.delete_CheckBox
    __del__ = lambda self : None;
CheckBox_swigregister = _mforms.CheckBox_swigregister
CheckBox_swigregister(CheckBox)

NormalEntry = _mforms.NormalEntry
PasswordEntry = _mforms.PasswordEntry
SearchEntry = _mforms.SearchEntry
EntryActivate = _mforms.EntryActivate
EntryKeyUp = _mforms.EntryKeyUp
EntryKeyDown = _mforms.EntryKeyDown
EntryCKeyUp = _mforms.EntryCKeyUp
EntryCKeyDown = _mforms.EntryCKeyDown
class TextEntry(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TextEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_max_length(self, *args): return _mforms.TextEntry_set_max_length(self, *args)
    def set_value(self, *args): return _mforms.TextEntry_set_value(self, *args)
    def get_string_value(self): return _mforms.TextEntry_get_string_value(self)
    def set_read_only(self, *args): return _mforms.TextEntry_set_read_only(self, *args)
    def add_changed_callback(self, *args): return _mforms.TextEntry_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TextEntry_call_changed_callback(self)
    __swig_destroy__ = _mforms.delete_TextEntry
    __del__ = lambda self : None;
TextEntry_swigregister = _mforms.TextEntry_swigregister
TextEntry_swigregister(TextEntry)

NoScrollBar = _mforms.NoScrollBar
HorizontalScrollBar = _mforms.HorizontalScrollBar
VerticalScrollBar = _mforms.VerticalScrollBar
BothScrollBars = _mforms.BothScrollBars
SmallScrollBars = _mforms.SmallScrollBars
KeyNone = _mforms.KeyNone
KeyChar = _mforms.KeyChar
KeyModifierOnly = _mforms.KeyModifierOnly
KeyEnter = _mforms.KeyEnter
KeyReturn = _mforms.KeyReturn
KeyHome = _mforms.KeyHome
KeyEnd = _mforms.KeyEnd
KeyPrevious = _mforms.KeyPrevious
KeyNext = _mforms.KeyNext
KeyUnkown = _mforms.KeyUnkown
class TextBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TextBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_bordered(self, *args): return _mforms.TextBox_set_bordered(self, *args)
    def set_monospaced(self, *args): return _mforms.TextBox_set_monospaced(self, *args)
    def set_read_only(self, *args): return _mforms.TextBox_set_read_only(self, *args)
    def set_value(self, *args): return _mforms.TextBox_set_value(self, *args)
    def get_string_value(self): return _mforms.TextBox_get_string_value(self)
    def get_selected_range(self, *args): return _mforms.TextBox_get_selected_range(self, *args)
    def append_text_and_scroll(self, *args): return _mforms.TextBox_append_text_and_scroll(self, *args)
    def append_text(self, *args): return _mforms.TextBox_append_text(self, *args)
    def append_text_with_encoding_and_scroll(self, *args): return _mforms.TextBox_append_text_with_encoding_and_scroll(self, *args)
    def append_text_with_encoding(self, *args): return _mforms.TextBox_append_text_with_encoding(self, *args)
    def set_padding(self, *args): return _mforms.TextBox_set_padding(self, *args)
    def clear(self): return _mforms.TextBox_clear(self)
    def add_changed_callback(self, *args): return _mforms.TextBox_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TextBox_call_changed_callback(self)
    __swig_destroy__ = _mforms.delete_TextBox
    __del__ = lambda self : None;
TextBox_swigregister = _mforms.TextBox_swigregister
TextBox_swigregister(TextBox)

BottomLeft = _mforms.BottomLeft
BottomCenter = _mforms.BottomCenter
BottomRight = _mforms.BottomRight
MiddleLeft = _mforms.MiddleLeft
MiddleCenter = _mforms.MiddleCenter
MiddleRight = _mforms.MiddleRight
TopLeft = _mforms.TopLeft
TopCenter = _mforms.TopCenter
TopRight = _mforms.TopRight
WizardLabelAlignment = _mforms.WizardLabelAlignment
NormalStyle = _mforms.NormalStyle
BoldStyle = _mforms.BoldStyle
SmallBoldStyle = _mforms.SmallBoldStyle
BigStyle = _mforms.BigStyle
BigBoldStyle = _mforms.BigBoldStyle
SmallStyle = _mforms.SmallStyle
VerySmallStyle = _mforms.VerySmallStyle
InfoCaptionStyle = _mforms.InfoCaptionStyle
BoldInfoCaptionStyle = _mforms.BoldInfoCaptionStyle
WizardHeadingStyle = _mforms.WizardHeadingStyle
SmallHelpTextStyle = _mforms.SmallHelpTextStyle
class Label(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Label, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Label, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Label(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_wrap_text(self, *args): return _mforms.Label_set_wrap_text(self, *args)
    def set_text_align(self, *args): return _mforms.Label_set_text_align(self, *args)
    def set_text(self, *args): return _mforms.Label_set_text(self, *args)
    def set_style(self, *args): return _mforms.Label_set_style(self, *args)
    def set_color(self, *args): return _mforms.Label_set_color(self, *args)
    __swig_destroy__ = _mforms.delete_Label
    __del__ = lambda self : None;
Label_swigregister = _mforms.Label_swigregister
Label_swigregister(Label)

SelectorCombobox = _mforms.SelectorCombobox
SelectorPopup = _mforms.SelectorPopup
class Selector(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selector, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Selector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Selector(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _mforms.Selector_clear(self)
    def add_item(self, *args): return _mforms.Selector_add_item(self, *args)
    def add_items(self, *args): return _mforms.Selector_add_items(self, *args)
    def get_item_title(self, *args): return _mforms.Selector_get_item_title(self, *args)
    def set_selected(self, *args): return _mforms.Selector_set_selected(self, *args)
    def index_of_item_with_title(self, *args): return _mforms.Selector_index_of_item_with_title(self, *args)
    def get_string_value(self): return _mforms.Selector_get_string_value(self)
    def get_selected_index(self): return _mforms.Selector_get_selected_index(self)
    def set_value(self, *args): return _mforms.Selector_set_value(self, *args)
    def get_item_count(self): return _mforms.Selector_get_item_count(self)
    def add_changed_callback(self, *args): return _mforms.Selector_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.Selector_call_changed_callback(self)
    __swig_destroy__ = _mforms.delete_Selector
    __del__ = lambda self : None;
Selector_swigregister = _mforms.Selector_swigregister
Selector_swigregister(Selector)

class ListBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ListBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _mforms.ListBox_clear(self)
    def set_heading(self, *args): return _mforms.ListBox_set_heading(self, *args)
    def add_item(self, *args): return _mforms.ListBox_add_item(self, *args)
    def add_items(self, *args): return _mforms.ListBox_add_items(self, *args)
    def set_selected(self, *args): return _mforms.ListBox_set_selected(self, *args)
    def get_string_value(self): return _mforms.ListBox_get_string_value(self)
    def get_selected_index(self): return _mforms.ListBox_get_selected_index(self)
    def get_selected_indices(self): return _mforms.ListBox_get_selected_indices(self)
    def add_changed_callback(self, *args): return _mforms.ListBox_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.ListBox_call_changed_callback(self)
    __swig_destroy__ = _mforms.delete_ListBox
    __del__ = lambda self : None;
ListBox_swigregister = _mforms.ListBox_swigregister
ListBox_swigregister(ListBox)

TabViewSystemStandard = _mforms.TabViewSystemStandard
TabViewTabless = _mforms.TabViewTabless
TabViewMainClosable = _mforms.TabViewMainClosable
TabViewDocument = _mforms.TabViewDocument
TabViewDocumentClosable = _mforms.TabViewDocumentClosable
TabViewPalette = _mforms.TabViewPalette
class TabView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TabView(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_active_tab(self, *args): return _mforms.TabView_set_active_tab(self, *args)
    def get_active_tab(self): return _mforms.TabView_get_active_tab(self)
    def add_page(self, *args): return _mforms.TabView_add_page(self, *args)
    def remove_page(self, *args): return _mforms.TabView_remove_page(self, *args)
    def set_tab_title(self, *args): return _mforms.TabView_set_tab_title(self, *args)
    def get_page_index(self, *args): return _mforms.TabView_get_page_index(self, *args)
    def get_page(self, *args): return _mforms.TabView_get_page(self, *args)
    def add_tab_changed_callback(self, *args): return _mforms.TabView_add_tab_changed_callback(self, *args)
    def call_tab_changed_callback(self): return _mforms.TabView_call_tab_changed_callback(self)
    def add_tab_closed_callback(self, *args): return _mforms.TabView_add_tab_closed_callback(self, *args)
    def call_tab_closed_callback(self, *args): return _mforms.TabView_call_tab_closed_callback(self, *args)
    __swig_destroy__ = _mforms.delete_TabView
    __del__ = lambda self : None;
TabView_swigregister = _mforms.TabView_swigregister
TabView_swigregister(TabView)

class Box(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _mforms.Box_add(self, *args)
    def add_end(self, *args): return _mforms.Box_add_end(self, *args)
    def remove(self, *args): return _mforms.Box_remove(self, *args)
    def set_homogeneous(self, *args): return _mforms.Box_set_homogeneous(self, *args)
    def set_spacing(self, *args): return _mforms.Box_set_spacing(self, *args)
    def set_padding(self, *args): return _mforms.Box_set_padding(self, *args)
    def is_horizontal(self): return _mforms.Box_is_horizontal(self)
    __swig_destroy__ = _mforms.delete_Box
    __del__ = lambda self : None;
Box_swigregister = _mforms.Box_swigregister
Box_swigregister(Box)

TransparentPanel = _mforms.TransparentPanel
FilledPanel = _mforms.FilledPanel
BorderedPanel = _mforms.BorderedPanel
LineBorderPanel = _mforms.LineBorderPanel
TitledBoxPanel = _mforms.TitledBoxPanel
TitledGroupPanel = _mforms.TitledGroupPanel
CheckBoxTitlePanel = _mforms.CheckBoxTitlePanel
FilledHeaderPanel = _mforms.FilledHeaderPanel
StyledHeaderPanel = _mforms.StyledHeaderPanel
class Panel(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Panel, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Panel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Panel(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_title(self, *args): return _mforms.Panel_set_title(self, *args)
    def set_back_color(self, *args): return _mforms.Panel_set_back_color(self, *args)
    def set_active(self, *args): return _mforms.Panel_set_active(self, *args)
    def get_active(self): return _mforms.Panel_get_active(self)
    def add(self, *args): return _mforms.Panel_add(self, *args)
    def remove(self, *args): return _mforms.Panel_remove(self, *args)
    def set_padding(self, *args): return _mforms.Panel_set_padding(self, *args)
    def add_toggled_callback(self, *args): return _mforms.Panel_add_toggled_callback(self, *args)
    def call_toggled_callback(self): return _mforms.Panel_call_toggled_callback(self)
    __swig_destroy__ = _mforms.delete_Panel
    __del__ = lambda self : None;
Panel_swigregister = _mforms.Panel_swigregister
Panel_swigregister(Panel)

OpenFile = _mforms.OpenFile
SaveFile = _mforms.SaveFile
OpenDirectory = _mforms.OpenDirectory
class FileChooser(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileChooser, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileChooser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_FileChooser(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_title(self, *args): return _mforms.FileChooser_set_title(self, *args)
    def run_modal(self): return _mforms.FileChooser_run_modal(self)
    def set_directory(self, *args): return _mforms.FileChooser_set_directory(self, *args)
    def get_path(self): return _mforms.FileChooser_get_path(self)
    def get_directory(self): return _mforms.FileChooser_get_directory(self)
    def set_extensions(self, *args): return _mforms.FileChooser_set_extensions(self, *args)
    def split_extensions(self, *args): return _mforms.FileChooser_split_extensions(self, *args)
    __swig_destroy__ = _mforms.delete_FileChooser
    __del__ = lambda self : None;
FileChooser_swigregister = _mforms.FileChooser_swigregister
FileChooser_swigregister(FileChooser)

class RadioButton(Button):
    __swig_setmethods__ = {}
    for _s in [Button]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadioButton, name, value)
    __swig_getmethods__ = {}
    for _s in [Button]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadioButton, name)
    __repr__ = _swig_repr
    __swig_getmethods__["new_id"] = lambda x: _mforms.RadioButton_new_id
    if _newclass:new_id = staticmethod(_mforms.RadioButton_new_id)
    def __init__(self, *args): 
        this = _mforms.new_RadioButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def group_id(self): return _mforms.RadioButton_group_id(self)
    def set_active(self, *args): return _mforms.RadioButton_set_active(self, *args)
    def get_active(self): return _mforms.RadioButton_get_active(self)
    def add_clicked_callback(self, *args): return _mforms.RadioButton_add_clicked_callback(self, *args)
    def call_clicked_callback(self): return _mforms.RadioButton_call_clicked_callback(self)
    __swig_destroy__ = _mforms.delete_RadioButton
    __del__ = lambda self : None;
RadioButton_swigregister = _mforms.RadioButton_swigregister
RadioButton_swigregister(RadioButton)

def RadioButton_new_id():
  return _mforms.RadioButton_new_id()
RadioButton_new_id = _mforms.RadioButton_new_id

class ImageBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_ImageBox()
        try: self.this.append(this)
        except: self.this = this
    def set_image(self, *args): return _mforms.ImageBox_set_image(self, *args)
    def set_scale_contents(self, *args): return _mforms.ImageBox_set_scale_contents(self, *args)
    def set_image_align(self, *args): return _mforms.ImageBox_set_image_align(self, *args)
    __swig_destroy__ = _mforms.delete_ImageBox
    __del__ = lambda self : None;
ImageBox_swigregister = _mforms.ImageBox_swigregister
ImageBox_swigregister(ImageBox)

class ProgressBar(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressBar, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressBar, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_ProgressBar()
        try: self.this.append(this)
        except: self.this = this
    def set_indeterminate(self, *args): return _mforms.ProgressBar_set_indeterminate(self, *args)
    def start(self): return _mforms.ProgressBar_start(self)
    def stop(self): return _mforms.ProgressBar_stop(self)
    def set_value(self, *args): return _mforms.ProgressBar_set_value(self, *args)
    __swig_destroy__ = _mforms.delete_ProgressBar
    __del__ = lambda self : None;
ProgressBar_swigregister = _mforms.ProgressBar_swigregister
ProgressBar_swigregister(ProgressBar)

NoFillExpandFlag = _mforms.NoFillExpandFlag
VExpandFlag = _mforms.VExpandFlag
HExpandFlag = _mforms.HExpandFlag
VFillFlag = _mforms.VFillFlag
HFillFlag = _mforms.HFillFlag
FillAndExpand = _mforms.FillAndExpand
class Table(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_Table()
        try: self.this.append(this)
        except: self.this = this
    def set_row_count(self, *args): return _mforms.Table_set_row_count(self, *args)
    def set_column_count(self, *args): return _mforms.Table_set_column_count(self, *args)
    def set_row_spacing(self, *args): return _mforms.Table_set_row_spacing(self, *args)
    def set_column_spacing(self, *args): return _mforms.Table_set_column_spacing(self, *args)
    def set_padding(self, *args): return _mforms.Table_set_padding(self, *args)
    def set_homogeneous(self, *args): return _mforms.Table_set_homogeneous(self, *args)
    def add(self, *args): return _mforms.Table_add(self, *args)
    def remove(self, *args): return _mforms.Table_remove(self, *args)
    def set_back_color(self, *args): return _mforms.Table_set_back_color(self, *args)
    __swig_destroy__ = _mforms.delete_Table
    __del__ = lambda self : None;
Table_swigregister = _mforms.Table_swigregister
Table_swigregister(Table)

ScrollPanelNoFlags = _mforms.ScrollPanelNoFlags
ScrollPanelBordered = _mforms.ScrollPanelBordered
ScrollPanelDrawBackground = _mforms.ScrollPanelDrawBackground
class ScrollPanel(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScrollPanel, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScrollPanel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_ScrollPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_visible_scrollers(self, *args): return _mforms.ScrollPanel_set_visible_scrollers(self, *args)
    def set_autohide_scrollers(self, *args): return _mforms.ScrollPanel_set_autohide_scrollers(self, *args)
    def add(self, *args): return _mforms.ScrollPanel_add(self, *args)
    def remove(self): return _mforms.ScrollPanel_remove(self)
    def scroll_to_view(self, *args): return _mforms.ScrollPanel_scroll_to_view(self, *args)
    __swig_destroy__ = _mforms.delete_ScrollPanel
    __del__ = lambda self : None;
ScrollPanel_swigregister = _mforms.ScrollPanel_swigregister
ScrollPanel_swigregister(ScrollPanel)

StringColumnType = _mforms.StringColumnType
IntegerColumnType = _mforms.IntegerColumnType
CheckColumnType = _mforms.CheckColumnType
TreeDefault = _mforms.TreeDefault
TreeNoColumns = _mforms.TreeNoColumns
TreeAllowReorderRows = _mforms.TreeAllowReorderRows
TreeShowColumnLines = _mforms.TreeShowColumnLines
TreeShowRowLines = _mforms.TreeShowRowLines
TreeNoBorder = _mforms.TreeNoBorder
TreeSidebar = _mforms.TreeSidebar
TreeNoHeader = _mforms.TreeNoHeader
class TreeView(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeView, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_TreeView(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_column(self, *args): return _mforms.TreeView_add_column(self, *args)
    def end_columns(self): return _mforms.TreeView_end_columns(self)
    def clear_rows(self): return _mforms.TreeView_clear_rows(self)
    def delete_row(self, *args): return _mforms.TreeView_delete_row(self, *args)
    def add_row(self): return _mforms.TreeView_add_row(self)
    def get_selected(self): return _mforms.TreeView_get_selected(self)
    def set_selected(self, *args): return _mforms.TreeView_set_selected(self, *args)
    def set_allow_sorting(self, *args): return _mforms.TreeView_set_allow_sorting(self, *args)
    def count(self): return _mforms.TreeView_count(self)
    def get_row_tag(self, *args): return _mforms.TreeView_get_row_tag(self, *args)
    def set_row_tag(self, *args): return _mforms.TreeView_set_row_tag(self, *args)
    def set_string(self, *args): return _mforms.TreeView_set_string(self, *args)
    def set_int(self, *args): return _mforms.TreeView_set_int(self, *args)
    def set_bool(self, *args): return _mforms.TreeView_set_bool(self, *args)
    def get_string(self, *args): return _mforms.TreeView_get_string(self, *args)
    def get_int(self, *args): return _mforms.TreeView_get_int(self, *args)
    def get_check(self, *args): return _mforms.TreeView_get_check(self, *args)
    def freeze_refresh(self): return _mforms.TreeView_freeze_refresh(self)
    def thaw_refresh(self): return _mforms.TreeView_thaw_refresh(self)
    def signal_changed(self): return _mforms.TreeView_signal_changed(self)
    def signal_row_activated(self): return _mforms.TreeView_signal_row_activated(self)
    def set_cell_edit_handler(self, *args): return _mforms.TreeView_set_cell_edit_handler(self, *args)
    def set_context_menu(self, *args): return _mforms.TreeView_set_context_menu(self, *args)
    def get_context_menu(self): return _mforms.TreeView_get_context_menu(self)
    def add_activated_callback(self, *args): return _mforms.TreeView_add_activated_callback(self, *args)
    def call_activated_callback(self, *args): return _mforms.TreeView_call_activated_callback(self, *args)
    def add_changed_callback(self, *args): return _mforms.TreeView_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TreeView_call_changed_callback(self)
    def set_cell_edited_callback(self, *args): return _mforms.TreeView_set_cell_edited_callback(self, *args)
    __swig_destroy__ = _mforms.delete_TreeView
    __del__ = lambda self : None;
TreeView_swigregister = _mforms.TreeView_swigregister
TreeView_swigregister(TreeView)

class Wizard(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wizard, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wizard, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_Wizard()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Wizard
    __del__ = lambda self : None;
    def flush_events(self): return _mforms.Wizard_flush_events(self)
    def set_title(self, *args): return _mforms.Wizard_set_title(self, *args)
    def run(self): return _mforms.Wizard_run(self)
    def close(self): return _mforms.Wizard_close(self)
    def set_content(self, *args): return _mforms.Wizard_set_content(self, *args)
    def set_heading(self, *args): return _mforms.Wizard_set_heading(self, *args)
    def set_step_list(self, *args): return _mforms.Wizard_set_step_list(self, *args)
    def set_allow_cancel(self, *args): return _mforms.Wizard_set_allow_cancel(self, *args)
    def set_allow_back(self, *args): return _mforms.Wizard_set_allow_back(self, *args)
    def set_allow_next(self, *args): return _mforms.Wizard_set_allow_next(self, *args)
    def set_show_extra(self, *args): return _mforms.Wizard_set_show_extra(self, *args)
    def set_extra_caption(self, *args): return _mforms.Wizard_set_extra_caption(self, *args)
    def set_next_caption(self, caption = ""): return _mforms.Wizard_set_next_caption(self, caption)
    def add_next_callback(self, *args): return _mforms.Wizard_add_next_callback(self, *args)
    def call_next_callback(self): return _mforms.Wizard_call_next_callback(self)
    def add_back_callback(self, *args): return _mforms.Wizard_add_back_callback(self, *args)
    def call_back_callback(self): return _mforms.Wizard_call_back_callback(self)
    def add_extra_callback(self, *args): return _mforms.Wizard_add_extra_callback(self, *args)
    def call_extra_callback(self): return _mforms.Wizard_call_extra_callback(self)
Wizard_swigregister = _mforms.Wizard_swigregister
Wizard_swigregister(Wizard)

Documents = _mforms.Documents
Desktop = _mforms.Desktop
ApplicationData = _mforms.ApplicationData
WinProgramFiles = _mforms.WinProgramFiles
WinProgramFilesX86 = _mforms.WinProgramFilesX86
SessionStorePasswordScheme = _mforms.SessionStorePasswordScheme
PersistentStorePasswordScheme = _mforms.PersistentStorePasswordScheme
ModifierNoModifier = _mforms.ModifierNoModifier
ModifierControl = _mforms.ModifierControl
ModifierShift = _mforms.ModifierShift
ModifierCommand = _mforms.ModifierCommand
ModifierAlt = _mforms.ModifierAlt
ResultOk = _mforms.ResultOk
ResultCancel = _mforms.ResultCancel
ResultOther = _mforms.ResultOther
DialogMessage = _mforms.DialogMessage
DialogError = _mforms.DialogError
DialogWarning = _mforms.DialogWarning
DialogQuery = _mforms.DialogQuery
DialogSuccess = _mforms.DialogSuccess
class Utilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Utilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Utilities, name)
    __repr__ = _swig_repr
    __swig_getmethods__["show_message"] = lambda x: _mforms.Utilities_show_message
    if _newclass:show_message = staticmethod(_mforms.Utilities_show_message)
    __swig_getmethods__["show_error"] = lambda x: _mforms.Utilities_show_error
    if _newclass:show_error = staticmethod(_mforms.Utilities_show_error)
    __swig_getmethods__["show_warning"] = lambda x: _mforms.Utilities_show_warning
    if _newclass:show_warning = staticmethod(_mforms.Utilities_show_warning)
    __swig_getmethods__["show_message_and_remember"] = lambda x: _mforms.Utilities_show_message_and_remember
    if _newclass:show_message_and_remember = staticmethod(_mforms.Utilities_show_message_and_remember)
    __swig_getmethods__["forget_message_answers"] = lambda x: _mforms.Utilities_forget_message_answers
    if _newclass:forget_message_answers = staticmethod(_mforms.Utilities_forget_message_answers)
    __swig_getmethods__["set_message_answers_storage_path"] = lambda x: _mforms.Utilities_set_message_answers_storage_path
    if _newclass:set_message_answers_storage_path = staticmethod(_mforms.Utilities_set_message_answers_storage_path)
    __swig_getmethods__["show_wait_message"] = lambda x: _mforms.Utilities_show_wait_message
    if _newclass:show_wait_message = staticmethod(_mforms.Utilities_show_wait_message)
    __swig_getmethods__["hide_wait_message"] = lambda x: _mforms.Utilities_hide_wait_message
    if _newclass:hide_wait_message = staticmethod(_mforms.Utilities_hide_wait_message)
    __swig_getmethods__["run_cancelable_task"] = lambda x: _mforms.Utilities_run_cancelable_task
    if _newclass:run_cancelable_task = staticmethod(_mforms.Utilities_run_cancelable_task)
    __swig_getmethods__["request_input"] = lambda x: _mforms.Utilities_request_input
    if _newclass:request_input = staticmethod(_mforms.Utilities_request_input)
    __swig_getmethods__["ask_for_password_check_store"] = lambda x: _mforms.Utilities_ask_for_password_check_store
    if _newclass:ask_for_password_check_store = staticmethod(_mforms.Utilities_ask_for_password_check_store)
    __swig_getmethods__["ask_for_password"] = lambda x: _mforms.Utilities_ask_for_password
    if _newclass:ask_for_password = staticmethod(_mforms.Utilities_ask_for_password)
    __swig_getmethods__["find_or_ask_for_password"] = lambda x: _mforms.Utilities_find_or_ask_for_password
    if _newclass:find_or_ask_for_password = staticmethod(_mforms.Utilities_find_or_ask_for_password)
    __swig_getmethods__["store_password"] = lambda x: _mforms.Utilities_store_password
    if _newclass:store_password = staticmethod(_mforms.Utilities_store_password)
    __swig_getmethods__["find_password"] = lambda x: _mforms.Utilities_find_password
    if _newclass:find_password = staticmethod(_mforms.Utilities_find_password)
    __swig_getmethods__["forget_password"] = lambda x: _mforms.Utilities_forget_password
    if _newclass:forget_password = staticmethod(_mforms.Utilities_forget_password)
    __swig_getmethods__["set_clipboard_text"] = lambda x: _mforms.Utilities_set_clipboard_text
    if _newclass:set_clipboard_text = staticmethod(_mforms.Utilities_set_clipboard_text)
    __swig_getmethods__["get_clipboard_text"] = lambda x: _mforms.Utilities_get_clipboard_text
    if _newclass:get_clipboard_text = staticmethod(_mforms.Utilities_get_clipboard_text)
    __swig_getmethods__["get_special_folder"] = lambda x: _mforms.Utilities_get_special_folder
    if _newclass:get_special_folder = staticmethod(_mforms.Utilities_get_special_folder)
    __swig_getmethods__["open_url"] = lambda x: _mforms.Utilities_open_url
    if _newclass:open_url = staticmethod(_mforms.Utilities_open_url)
    __swig_getmethods__["add_end_ok_cancel_buttons"] = lambda x: _mforms.Utilities_add_end_ok_cancel_buttons
    if _newclass:add_end_ok_cancel_buttons = staticmethod(_mforms.Utilities_add_end_ok_cancel_buttons)
    __swig_getmethods__["load_icon"] = lambda x: _mforms.Utilities_load_icon
    if _newclass:load_icon = staticmethod(_mforms.Utilities_load_icon)
    __swig_getmethods__["shorten_string"] = lambda x: _mforms.Utilities_shorten_string
    if _newclass:shorten_string = staticmethod(_mforms.Utilities_shorten_string)
    __swig_getmethods__["in_main_thread"] = lambda x: _mforms.Utilities_in_main_thread
    if _newclass:in_main_thread = staticmethod(_mforms.Utilities_in_main_thread)
    __swig_getmethods__["add_timeout"] = lambda x: _mforms.Utilities_add_timeout
    if _newclass:add_timeout = staticmethod(_mforms.Utilities_add_timeout)
    def __init__(self): 
        this = _mforms.new_Utilities()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Utilities
    __del__ = lambda self : None;
Utilities_swigregister = _mforms.Utilities_swigregister
Utilities_swigregister(Utilities)

def Utilities_show_message(*args):
  return _mforms.Utilities_show_message(*args)
Utilities_show_message = _mforms.Utilities_show_message

def Utilities_show_error(*args):
  return _mforms.Utilities_show_error(*args)
Utilities_show_error = _mforms.Utilities_show_error

def Utilities_show_warning(*args):
  return _mforms.Utilities_show_warning(*args)
Utilities_show_warning = _mforms.Utilities_show_warning

def Utilities_show_message_and_remember(*args):
  return _mforms.Utilities_show_message_and_remember(*args)
Utilities_show_message_and_remember = _mforms.Utilities_show_message_and_remember

def Utilities_forget_message_answers():
  return _mforms.Utilities_forget_message_answers()
Utilities_forget_message_answers = _mforms.Utilities_forget_message_answers

def Utilities_set_message_answers_storage_path(*args):
  return _mforms.Utilities_set_message_answers_storage_path(*args)
Utilities_set_message_answers_storage_path = _mforms.Utilities_set_message_answers_storage_path

def Utilities_show_wait_message(*args):
  return _mforms.Utilities_show_wait_message(*args)
Utilities_show_wait_message = _mforms.Utilities_show_wait_message

def Utilities_hide_wait_message():
  return _mforms.Utilities_hide_wait_message()
Utilities_hide_wait_message = _mforms.Utilities_hide_wait_message

def Utilities_run_cancelable_task(*args):
  return _mforms.Utilities_run_cancelable_task(*args)
Utilities_run_cancelable_task = _mforms.Utilities_run_cancelable_task

def Utilities_request_input(*args):
  return _mforms.Utilities_request_input(*args)
Utilities_request_input = _mforms.Utilities_request_input

def Utilities_ask_for_password_check_store(*args):
  return _mforms.Utilities_ask_for_password_check_store(*args)
Utilities_ask_for_password_check_store = _mforms.Utilities_ask_for_password_check_store

def Utilities_ask_for_password(*args):
  return _mforms.Utilities_ask_for_password(*args)
Utilities_ask_for_password = _mforms.Utilities_ask_for_password

def Utilities_find_or_ask_for_password(*args):
  return _mforms.Utilities_find_or_ask_for_password(*args)
Utilities_find_or_ask_for_password = _mforms.Utilities_find_or_ask_for_password

def Utilities_store_password(*args):
  return _mforms.Utilities_store_password(*args)
Utilities_store_password = _mforms.Utilities_store_password

def Utilities_find_password(*args):
  return _mforms.Utilities_find_password(*args)
Utilities_find_password = _mforms.Utilities_find_password

def Utilities_forget_password(*args):
  return _mforms.Utilities_forget_password(*args)
Utilities_forget_password = _mforms.Utilities_forget_password

def Utilities_set_clipboard_text(*args):
  return _mforms.Utilities_set_clipboard_text(*args)
Utilities_set_clipboard_text = _mforms.Utilities_set_clipboard_text

def Utilities_get_clipboard_text():
  return _mforms.Utilities_get_clipboard_text()
Utilities_get_clipboard_text = _mforms.Utilities_get_clipboard_text

def Utilities_get_special_folder(*args):
  return _mforms.Utilities_get_special_folder(*args)
Utilities_get_special_folder = _mforms.Utilities_get_special_folder

def Utilities_open_url(*args):
  return _mforms.Utilities_open_url(*args)
Utilities_open_url = _mforms.Utilities_open_url

def Utilities_add_end_ok_cancel_buttons(*args):
  return _mforms.Utilities_add_end_ok_cancel_buttons(*args)
Utilities_add_end_ok_cancel_buttons = _mforms.Utilities_add_end_ok_cancel_buttons

def Utilities_load_icon(*args):
  return _mforms.Utilities_load_icon(*args)
Utilities_load_icon = _mforms.Utilities_load_icon

def Utilities_shorten_string(*args):
  return _mforms.Utilities_shorten_string(*args)
Utilities_shorten_string = _mforms.Utilities_shorten_string

def Utilities_in_main_thread():
  return _mforms.Utilities_in_main_thread()
Utilities_in_main_thread = _mforms.Utilities_in_main_thread

def Utilities_add_timeout(*args):
  return _mforms.Utilities_add_timeout(*args)
Utilities_add_timeout = _mforms.Utilities_add_timeout

class AppView(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppView, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_AppView(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_AppView
    __del__ = lambda self : None;
    def set_title(self, *args): return _mforms.AppView_set_title(self, *args)
    def set_identifier(self, *args): return _mforms.AppView_set_identifier(self, *args)
    def identifier(self): return _mforms.AppView_identifier(self)
    def get_menubar(self): return _mforms.AppView_get_menubar(self)
    def set_menubar(self, *args): return _mforms.AppView_set_menubar(self, *args)
    def get_toolbar(self): return _mforms.AppView_get_toolbar(self)
    def set_toolbar(self, *args): return _mforms.AppView_set_toolbar(self, *args)
    def on_close(self, *args): return _mforms.AppView_on_close(self, *args)
AppView_swigregister = _mforms.AppView_swigregister
AppView_swigregister(AppView)

SystemHighlight = _mforms.SystemHighlight
class App(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, App, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, App, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _mforms.App_get
    if _newclass:get = staticmethod(_mforms.App_get)
    def dock_view(self, *args): return _mforms.App_dock_view(self, *args)
    def select_view(self, *args): return _mforms.App_select_view(self, *args)
    def undock_view(self, *args): return _mforms.App_undock_view(self, *args)
    def set_view_title(self, *args): return _mforms.App_set_view_title(self, *args)
    def set_status_text(self, *args): return _mforms.App_set_status_text(self, *args)
    def get_resource_path(self, *args): return _mforms.App_get_resource_path(self, *args)
    def get_user_data_folder(self): return _mforms.App_get_user_data_folder(self)
    def get_bounds(self, *args): return _mforms.App_get_bounds(self, *args)
    def enter_event_loop(self, timeout = 0.0): return _mforms.App_enter_event_loop(self, timeout)
    def exit_event_loop(self, *args): return _mforms.App_exit_event_loop(self, *args)
    def set_view_for_identifier(self, *args): return _mforms.App_set_view_for_identifier(self, *args)
    def get_view_for_identifier(self, *args): return _mforms.App_get_view_for_identifier(self, *args)
    __swig_getmethods__["begin_thread_loop"] = lambda x: _mforms.App_begin_thread_loop
    if _newclass:begin_thread_loop = staticmethod(_mforms.App_begin_thread_loop)
    __swig_getmethods__["end_thread_loop"] = lambda x: _mforms.App_end_thread_loop
    if _newclass:end_thread_loop = staticmethod(_mforms.App_end_thread_loop)
    def get_system_color(self, *args): return _mforms.App_get_system_color(self, *args)
    __swig_destroy__ = _mforms.delete_App
    __del__ = lambda self : None;
App_swigregister = _mforms.App_swigregister
App_swigregister(App)

def App_get():
  return _mforms.App_get()
App_get = _mforms.App_get

def App_begin_thread_loop():
  return _mforms.App_begin_thread_loop()
App_begin_thread_loop = _mforms.App_begin_thread_loop

def App_end_thread_loop():
  return _mforms.App_end_thread_loop()
App_end_thread_loop = _mforms.App_end_thread_loop

class DrawBox(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawBox, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_DrawBox()
        try: self.this.append(this)
        except: self.this = this
    def set_needs_repaint(self): return _mforms.DrawBox_set_needs_repaint(self)
    def get_layout_size(self, *args): return _mforms.DrawBox_get_layout_size(self, *args)
    __swig_destroy__ = _mforms.delete_DrawBox
    __del__ = lambda self : None;
DrawBox_swigregister = _mforms.DrawBox_swigregister
DrawBox_swigregister(DrawBox)

TabBackground = _mforms.TabBackground
TabMainCaption = _mforms.TabMainCaption
TabSubCaption = _mforms.TabSubCaption
TabLineColor = _mforms.TabLineColor
class TabSwitcher(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabSwitcher, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabSwitcher, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_TabSwitcher()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_TabSwitcher
    __del__ = lambda self : None;
    def attach_to_tabview(self, *args): return _mforms.TabSwitcher_attach_to_tabview(self, *args)
    def add_item(self, *args): return _mforms.TabSwitcher_add_item(self, *args)
    def set_icon(self, *args): return _mforms.TabSwitcher_set_icon(self, *args)
    def set_color(self, *args): return _mforms.TabSwitcher_set_color(self, *args)
    def set_selected(self, *args): return _mforms.TabSwitcher_set_selected(self, *args)
    def get_selected(self): return _mforms.TabSwitcher_get_selected(self)
    def set_needs_relayout(self): return _mforms.TabSwitcher_set_needs_relayout(self)
    def add_changed_callback(self, *args): return _mforms.TabSwitcher_add_changed_callback(self, *args)
    def call_changed_callback(self): return _mforms.TabSwitcher_call_changed_callback(self)
TabSwitcher_swigregister = _mforms.TabSwitcher_swigregister
TabSwitcher_swigregister(TabSwitcher)

class SectionBox(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SectionBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_SectionBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_SectionBox
    __del__ = lambda self : None;
    def set_content(self, *args): return _mforms.SectionBox_set_content(self, *args)
    def toggle(self): return _mforms.SectionBox_toggle(self)
    def set_expanded(self, *args): return _mforms.SectionBox_set_expanded(self, *args)
    def get_expanded(self): return _mforms.SectionBox_get_expanded(self)
SectionBox_swigregister = _mforms.SectionBox_swigregister
SectionBox_swigregister(SectionBox)

class BaseWidget(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_BaseWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_BaseWidget
    __del__ = lambda self : None;
    def enable_auto_scale(self, *args): return _mforms.BaseWidget_enable_auto_scale(self, *args)
    def get_upper_range(self): return _mforms.BaseWidget_get_upper_range(self)
    def set_value_range(self, *args): return _mforms.BaseWidget_set_value_range(self, *args)
    def set_thresholds(self, *args): return _mforms.BaseWidget_set_thresholds(self, *args)
    def set_description(self, *args): return _mforms.BaseWidget_set_description(self, *args)
BaseWidget_swigregister = _mforms.BaseWidget_swigregister
BaseWidget_swigregister(BaseWidget)

class WidgetSeparator(DrawBox):
    __swig_setmethods__ = {}
    for _s in [DrawBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetSeparator, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetSeparator, name)
    __repr__ = _swig_repr
    def repaint(self, *args): return _mforms.WidgetSeparator_repaint(self, *args)
    def __init__(self): 
        this = _mforms.new_WidgetSeparator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_WidgetSeparator
    __del__ = lambda self : None;
WidgetSeparator_swigregister = _mforms.WidgetSeparator_swigregister
WidgetSeparator_swigregister(WidgetSeparator)

class WidgetContainer(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_WidgetContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_WidgetContainer
    __del__ = lambda self : None;
    def add_widget(self, *args): return _mforms.WidgetContainer_add_widget(self, *args)
    def set_title(self, *args): return _mforms.WidgetContainer_set_title(self, *args)
WidgetContainer_swigregister = _mforms.WidgetContainer_swigregister
WidgetContainer_swigregister(WidgetContainer)

HEARTBEAT_DATA_SIZE = _mforms.HEARTBEAT_DATA_SIZE
class HeartbeatWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeartbeatWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeartbeatWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_HeartbeatWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_HeartbeatWidget
    __del__ = lambda self : None;
    def set_value(self, *args): return _mforms.HeartbeatWidget_set_value(self, *args)
HeartbeatWidget_swigregister = _mforms.HeartbeatWidget_swigregister
HeartbeatWidget_swigregister(HeartbeatWidget)

class ServerInfoWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInfoWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInfoWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_ServerInfoWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_ServerInfoWidget
    __del__ = lambda self : None;
    def set_server_info(self, *args): return _mforms.ServerInfoWidget_set_server_info(self, *args)
    def set_server_status(self, *args): return _mforms.ServerInfoWidget_set_server_status(self, *args)
ServerInfoWidget_swigregister = _mforms.ServerInfoWidget_swigregister
ServerInfoWidget_swigregister(ServerInfoWidget)

class BarGraphWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarGraphWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarGraphWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_BarGraphWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_BarGraphWidget
    __del__ = lambda self : None;
    def set_value(self, *args): return _mforms.BarGraphWidget_set_value(self, *args)
BarGraphWidget_swigregister = _mforms.BarGraphWidget_swigregister
BarGraphWidget_swigregister(BarGraphWidget)

LINE_SERIES_DATA_SIZE = _mforms.LINE_SERIES_DATA_SIZE
class LineDiagramWidget(BaseWidget):
    __swig_setmethods__ = {}
    for _s in [BaseWidget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineDiagramWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseWidget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineDiagramWidget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_LineDiagramWidget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_LineDiagramWidget
    __del__ = lambda self : None;
    def set_value(self, *args): return _mforms.LineDiagramWidget_set_value(self, *args)
LineDiagramWidget_swigregister = _mforms.LineDiagramWidget_swigregister
LineDiagramWidget_swigregister(LineDiagramWidget)

class WebBrowser(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WebBrowser, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WebBrowser, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_WebBrowser()
        try: self.this.append(this)
        except: self.this = this
    def set_html(self, *args): return _mforms.WebBrowser_set_html(self, *args)
    def navigate(self, *args): return _mforms.WebBrowser_navigate(self, *args)
    def get_document_title(self): return _mforms.WebBrowser_get_document_title(self)
    def add_loaded_callback(self, *args): return _mforms.WebBrowser_add_loaded_callback(self, *args)
    def call_loaded_callback(self, *args): return _mforms.WebBrowser_call_loaded_callback(self, *args)
    __swig_destroy__ = _mforms.delete_WebBrowser
    __del__ = lambda self : None;
WebBrowser_swigregister = _mforms.WebBrowser_swigregister
WebBrowser_swigregister(WebBrowser)

PopupPlain = _mforms.PopupPlain
PopupBezel = _mforms.PopupBezel
class Popup(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Popup, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Popup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mforms.new_Popup(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_needs_repaint(self): return _mforms.Popup_set_needs_repaint(self)
    def set_size(self, *args): return _mforms.Popup_set_size(self, *args)
    def show(self, *args): return _mforms.Popup_show(self, *args)
    def get_content_rect(self): return _mforms.Popup_get_content_rect(self)
    def set_modal_result(self, *args): return _mforms.Popup_set_modal_result(self, *args)
    __swig_destroy__ = _mforms.delete_Popup
    __del__ = lambda self : None;
Popup_swigregister = _mforms.Popup_swigregister
Popup_swigregister(Popup)

class Menu(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Menu, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Menu, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_Menu()
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _mforms.Menu_clear(self)
    def remove_item(self, *args): return _mforms.Menu_remove_item(self, *args)
    def add_item(self, *args): return _mforms.Menu_add_item(self, *args)
    def add_separator(self): return _mforms.Menu_add_separator(self)
    def add_submenu(self, *args): return _mforms.Menu_add_submenu(self, *args)
    def add_items_from_list(self, *args): return _mforms.Menu_add_items_from_list(self, *args)
    def set_item_enabled(self, *args): return _mforms.Menu_set_item_enabled(self, *args)
    def set_handler(self, *args): return _mforms.Menu_set_handler(self, *args)
    def popup_at(self, *args): return _mforms.Menu_popup_at(self, *args)
    def popup(self): return _mforms.Menu_popup(self)
    def handle_action(self, *args): return _mforms.Menu_handle_action(self, *args)
    def get_item_index(self, *args): return _mforms.Menu_get_item_index(self, *args)
    def signal_will_show(self): return _mforms.Menu_signal_will_show(self)
    __swig_destroy__ = _mforms.delete_Menu
    __del__ = lambda self : None;
Menu_swigregister = _mforms.Menu_swigregister
Menu_swigregister(Menu)

LanguageNone = _mforms.LanguageNone
LanguageMySQL = _mforms.LanguageMySQL
LanguageCpp = _mforms.LanguageCpp
LanguageLua = _mforms.LanguageLua
LanguagePython = _mforms.LanguagePython
LineMarkupNone = _mforms.LineMarkupNone
LineMarkupBreakpoint = _mforms.LineMarkupBreakpoint
LineMarkupBreakpointHit = _mforms.LineMarkupBreakpointHit
LineMarkupError = _mforms.LineMarkupError
LineMarkupStatement = _mforms.LineMarkupStatement
LineMarkupCurrent = _mforms.LineMarkupCurrent
LineMarkupAll = _mforms.LineMarkupAll
class CodeEditor(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeEditor, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CodeEditor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_CodeEditor()
        try: self.this.append(this)
        except: self.this = this
    def set_text(self, *args): return _mforms.CodeEditor_set_text(self, *args)
    def set_value(self, *args): return _mforms.CodeEditor_set_value(self, *args)
    def get_text(self, *args): return _mforms.CodeEditor_get_text(self, *args)
    def get_string_value(self): return _mforms.CodeEditor_get_string_value(self)
    def set_selection(self, *args): return _mforms.CodeEditor_set_selection(self, *args)
    def get_selection(self, *args): return _mforms.CodeEditor_get_selection(self, *args)
    def get_range_of_line(self, *args): return _mforms.CodeEditor_get_range_of_line(self, *args)
    def set_language(self, *args): return _mforms.CodeEditor_set_language(self, *args)
    def set_read_only(self, *args): return _mforms.CodeEditor_set_read_only(self, *args)
    def show_markup(self, *args): return _mforms.CodeEditor_show_markup(self, *args)
    def remove_markup(self, *args): return _mforms.CodeEditor_remove_markup(self, *args)
    def line_count(self): return _mforms.CodeEditor_line_count(self)
    def set_font(self, *args): return _mforms.CodeEditor_set_font(self, *args)
    __swig_destroy__ = _mforms.delete_CodeEditor
    __del__ = lambda self : None;
CodeEditor_swigregister = _mforms.CodeEditor_swigregister
CodeEditor_swigregister(CodeEditor)

def __or__(*args):
  return _mforms.__or__(*args)
__or__ = _mforms.__or__

class TaskSidebar(Box):
    __swig_setmethods__ = {}
    for _s in [Box]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskSidebar, name, value)
    __swig_getmethods__ = {}
    for _s in [Box]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaskSidebar, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _mforms.TaskSidebar_create
    if _newclass:create = staticmethod(_mforms.TaskSidebar_create)
    def refresh_model(self): return _mforms.TaskSidebar_refresh_model(self)
    def set_schema_model(self, *args): return _mforms.TaskSidebar_set_schema_model(self, *args)
    def get_schema_tree(self): return _mforms.TaskSidebar_get_schema_tree(self)
    def add_section(self, *args): return _mforms.TaskSidebar_add_section(self, *args)
    def remove_section(self, *args): return _mforms.TaskSidebar_remove_section(self, *args)
    def add_section_entry(self, *args): return _mforms.TaskSidebar_add_section_entry(self, *args)
    def remove_section_entry(self, *args): return _mforms.TaskSidebar_remove_section_entry(self, *args)
    def clear_sections(self): return _mforms.TaskSidebar_clear_sections(self)
    def clear_section(self, *args): return _mforms.TaskSidebar_clear_section(self, *args)
    def set_selection_color(self, *args): return _mforms.TaskSidebar_set_selection_color(self, *args)
    def expand_schema(self, *args): return _mforms.TaskSidebar_expand_schema(self, *args)
    def select_entry(self, *args): return _mforms.TaskSidebar_select_entry(self, *args)
    def clear_selection(self): return _mforms.TaskSidebar_clear_selection(self)
    def on_section_command(self): return _mforms.TaskSidebar_on_section_command(self)
    def add_on_section_command_callback(self, *args): return _mforms.TaskSidebar_add_on_section_command_callback(self, *args)
    def call_on_section_command_callback(self, *args): return _mforms.TaskSidebar_call_on_section_command_callback(self, *args)
    __swig_destroy__ = _mforms.delete_TaskSidebar
    __del__ = lambda self : None;
TaskSidebar_swigregister = _mforms.TaskSidebar_swigregister
TaskSidebar_swigregister(TaskSidebar)

def TaskSidebar_create():
  return _mforms.TaskSidebar_create()
TaskSidebar_create = _mforms.TaskSidebar_create

CellInvalid = _mforms.CellInvalid
CellText = _mforms.CellText
CellBool = _mforms.CellBool
CellEnum = _mforms.CellEnum
CellHeader = _mforms.CellHeader
CellsReadable = _mforms.CellsReadable
CellsEditable = _mforms.CellsEditable
ShadeNone = _mforms.ShadeNone
ShadeFind = _mforms.ShadeFind
ShadeFilter = _mforms.ShadeFilter
class SimpleGridPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleGridPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleGridPath, name)
    __repr__ = _swig_repr
    def size(self): return _mforms.SimpleGridPath_size(self)
    def append(self, *args): return _mforms.SimpleGridPath_append(self, *args)
    def index(self, *args): return _mforms.SimpleGridPath_index(self, *args)
    def set_index(self, *args): return _mforms.SimpleGridPath_set_index(self, *args)
    def __eq__(self, *args): return _mforms.SimpleGridPath___eq__(self, *args)
    def __init__(self): 
        this = _mforms.new_SimpleGridPath()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_SimpleGridPath
    __del__ = lambda self : None;
SimpleGridPath_swigregister = _mforms.SimpleGridPath_swigregister
SimpleGridPath_swigregister(SimpleGridPath)

class SimpleGrid(View):
    __swig_setmethods__ = {}
    for _s in [View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mforms.new_SimpleGrid()
        try: self.this.append(this)
        except: self.this = this
    def add_column(self, *args): return _mforms.SimpleGrid_add_column(self, *args)
    def append_header(self, *args): return _mforms.SimpleGrid_append_header(self, *args)
    def append_row(self, *args): return _mforms.SimpleGrid_append_row(self, *args)
    def set_str_value(self, *args): return _mforms.SimpleGrid_set_str_value(self, *args)
    def set_bool_value(self, *args): return _mforms.SimpleGrid_set_bool_value(self, *args)
    def get_value(self, *args): return _mforms.SimpleGrid_get_value(self, *args)
    def set_fg(self, *args): return _mforms.SimpleGrid_set_fg(self, *args)
    def set_bg(self, *args): return _mforms.SimpleGrid_set_bg(self, *args)
    def set_underline(self, *args): return _mforms.SimpleGrid_set_underline(self, *args)
    def set_enum(self, *args): return _mforms.SimpleGrid_set_enum(self, *args)
    def shade(self, *args): return _mforms.SimpleGrid_shade(self, *args)
    def unshade(self, *args): return _mforms.SimpleGrid_unshade(self, *args)
    def has_shade(self, *args): return _mforms.SimpleGrid_has_shade(self, *args)
    def scroll_to_row(self, *args): return _mforms.SimpleGrid_scroll_to_row(self, *args)
    def add_content_edited_callback(self, *args): return _mforms.SimpleGrid_add_content_edited_callback(self, *args)
    def add_ro_content_clicked_callback(self, *args): return _mforms.SimpleGrid_add_ro_content_clicked_callback(self, *args)
    __swig_destroy__ = _mforms.delete_SimpleGrid
    __del__ = lambda self : None;
SimpleGrid_swigregister = _mforms.SimpleGrid_swigregister
SimpleGrid_swigregister(SimpleGrid)

class Padding(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Padding, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Padding, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _mforms.Padding_left_set
    __swig_getmethods__["left"] = _mforms.Padding_left_get
    if _newclass:left = _swig_property(_mforms.Padding_left_get, _mforms.Padding_left_set)
    __swig_setmethods__["top"] = _mforms.Padding_top_set
    __swig_getmethods__["top"] = _mforms.Padding_top_get
    if _newclass:top = _swig_property(_mforms.Padding_top_get, _mforms.Padding_top_set)
    __swig_setmethods__["right"] = _mforms.Padding_right_set
    __swig_getmethods__["right"] = _mforms.Padding_right_get
    if _newclass:right = _swig_property(_mforms.Padding_right_get, _mforms.Padding_right_set)
    __swig_setmethods__["bottom"] = _mforms.Padding_bottom_set
    __swig_getmethods__["bottom"] = _mforms.Padding_bottom_get
    if _newclass:bottom = _swig_property(_mforms.Padding_bottom_get, _mforms.Padding_bottom_set)
    def __init__(self, *args): 
        this = _mforms.new_Padding(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mforms.delete_Padding
    __del__ = lambda self : None;
Padding_swigregister = _mforms.Padding_swigregister
Padding_swigregister(Padding)



